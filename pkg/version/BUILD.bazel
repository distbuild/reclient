load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
load("//:settings.bzl", "SDK_COMMIT")
load("//:version.bzl", "VERSION_MAJOR", "VERSION_MINOR", "VERSION_PATCH")

# gazelle:exclude *.h

go_library(
    name = "version",
    srcs = ["version.go"],
    importpath = "github.com/bazelbuild/reclient/pkg/version",
    visibility = ["//visibility:public"],
    # x_defs attribute substitutes the string with given values.
    # Refer to https://github.com/bazelbuild/rules_go/blob/master/go/core.rst#defines-and-stamping.
    x_defs = {
        "github.com/bazelbuild/reclient/pkg/version.versionMajor": VERSION_MAJOR,
        "github.com/bazelbuild/reclient/pkg/version.versionMinor": VERSION_MINOR,
        "github.com/bazelbuild/reclient/pkg/version.versionPatch": VERSION_PATCH,
        # "{STABLE_VERSION_SHA}" is the git-sha is produced by the workspace status
        #  command set in ".bazelrc" file of this repository.
        "github.com/bazelbuild/reclient/pkg/version.versionSHA": "{STABLE_VERSION_SHA}",
        "github.com/bazelbuild/reclient/pkg/version.sdkVersionSHA": SDK_COMMIT,
    },
    deps = [
        "//internal/pkg/rbeflag",
        "@com_github_golang_glog//:glog",
    ],
)

go_test(
    name = "version_test",
    srcs = ["version_test.go"],
    embed = [":version"],
)

genrule(
    name = "stable_status",
    outs = ["stable_status.h"],
    cmd = """
        echo "#ifndef _PKG_VERSION_STABLE_STATUS_H" > $@;
        echo "# define _PKG_VERSION_STABLE_STATUS_H" >> $@;
        cat bazel-out/stable-status.txt | sed 's/\\(.*\\) \\(.*\\)/# define \\1 "\\2"/' >> $@;
        echo "#endif // _PKG_VERSION_STABLE_STATUS_H" >> $@;
    """,
    stamp = 1,
)

expand_template(
    name = "version_h",
    out = "version.h",
    substitutions = select({
        "//:clangscandeps_input_processor_config": {
            "{INPUT_PROCESSOR}": "ClangscandepsIPService",
            "{VERSION_MAJOR}": VERSION_MAJOR,
            "{VERSION_MINOR}": VERSION_MINOR,
            "{VERSION_PATCH}": VERSION_PATCH,
        },
        "//:goma_input_processor_config": {
            "{INPUT_PROCESSOR}": "GomaIPService",
            "{VERSION_MAJOR}": VERSION_MAJOR,
            "{VERSION_MINOR}": VERSION_MINOR,
            "{VERSION_PATCH}": VERSION_PATCH,
        },
    }),
    target_compatible_with = select({
        "//:goma_input_processor_config": [],
        "//:clangscandeps_input_processor_config": [],
        "//conditions:default": ["@platforms//:incompatible"],
    }),
    template = "version.tmpl.h",
)

cc_library(
    name = "version_cc",
    srcs = [
        "stable_status.h",
        "version.h",
    ],
    hdrs = [
        "version.h",
    ],
    visibility = ["//visibility:public"],
)
